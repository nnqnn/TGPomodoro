import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
import config

BOT_TOKEN = config.BOT_TOKEN

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class PomodoroStates(StatesGroup):
    SET_WORK = State()
    SET_BREAK = State()

async def pomodoro_timer(user_id, work_time, break_time):
    try:
        while True:
            # –†–∞–±–æ—á–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            user_data[user_id]['is_working'] = True
            await bot.send_message(user_id, f"üõ† –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—á–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {work_time} –º–∏–Ω—É—Ç!")
            await asyncio.sleep(work_time * 60)
            
            # –ü–µ—Ä–µ—Ä—ã–≤
            user_data[user_id]['is_working'] = False
            await bot.send_message(user_id, f"‚òï –ü–µ—Ä–µ—Ä—ã–≤: {break_time} –º–∏–Ω—É—Ç!")
            await asyncio.sleep(break_time * 60)
            
    except asyncio.CancelledError:
        await bot.send_message(user_id, "‚è∏ –¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        user_data[user_id]['is_working'] = None

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id] = {
        'work_time': 25,
        'break_time': 5,
        'task': None,
        'is_working': None
    }
    
    text = (
        "üçÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Pomodoro –±–æ—Ç!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start_timer - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä\n"
        "/stop_timer - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä\n"
        "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤\n"
        "/status - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å"
    )
    
    await message.answer(text)

@dp.message_handler(commands=['start_timer'])
async def cmd_start_timer(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start")
        return
    
    if user_data[user_id]['task'] and not user_data[user_id]['task'].cancelled():
        await message.answer("–¢–∞–π–º–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
        return
    
    work_time = user_data[user_id]['work_time']
    break_time = user_data[user_id]['break_time']
    
    user_data[user_id]['task'] = asyncio.create_task(
        pomodoro_timer(user_id, work_time, break_time)
    )
    await message.answer("–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω!")

@dp.message_handler(commands=['stop_timer'])
async def cmd_stop_timer(message: types.Message):
    user_id = message.from_user.id
    if user_data.get(user_id, {}).get('task'):
        user_data[user_id]['task'].cancel()
        user_data[user_id]['task'] = None
        await message.answer("–¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    else:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤")

@dp.message_handler(commands=['settings'])
async def cmd_settings(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è", "–í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞")
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=keyboard
    )

@dp.message_handler(text="–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è")
async def set_work_time(message: types.Message):
    await PomodoroStates.SET_WORK.set()
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (–≤ –º–∏–Ω—É—Ç–∞—Ö):",
        reply_markup=types.ReplyKeyboardRemove()
    )

@dp.message_handler(text="–í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞")
async def set_break_time(message: types.Message):
    await PomodoroStates.SET_BREAK.set()
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞ (–≤ –º–∏–Ω—É—Ç–∞—Ö):",
        reply_markup=types.ReplyKeyboardRemove()
    )

@dp.message_handler(state=PomodoroStates.SET_WORK)
async def process_work_time(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        time = int(message.text)
        if time <= 0:
            raise ValueError
        user_data[user_id]['work_time'] = time
        await message.answer(f"üïì –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {time} –º–∏–Ω—É—Ç")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
    await state.finish()

@dp.message_handler(state=PomodoroStates.SET_BREAK)
async def process_break_time(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        time = int(message.text)
        if time <= 0:
            raise ValueError
        user_data[user_id]['break_time'] = time
        await message.answer(f"üïì –í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {time} –º–∏–Ω—É—Ç")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
    await state.finish()

@dp.message_handler(commands=['status'])
async def cmd_status(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start")
        return
    
    status = "–Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
    if user_data[user_id]['task'] and not user_data[user_id]['task'].cancelled():
        status = "—Ä–∞–±–æ—Ç–∞–µ—Ç" if user_data[user_id]['is_working'] else "–ø–µ—Ä–µ—Ä—ã–≤"
    
    text = (
        f"üçÖ –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status}\n"
        f"–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: {user_data[user_id]['work_time']} –º–∏–Ω\n"
        f"–í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞: {user_data[user_id]['break_time']} –º–∏–Ω"
    )
    
    await message.answer(text)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)